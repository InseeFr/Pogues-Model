package fr.insee.pogues.conversion;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.json.*;
import java.io.*;

/** Pogues application generates suggester "synonyms" parameter as key/value pairs.
 * This modeling is not adapted for XSD generation (at least without a hack).
 * This class is intended to transform key/value pairs generated by Pogues into source/target fields that are defined
 * in the xml schema. */
public class JSONSynonymsPreProcessor {

    private static final Logger logger  = LoggerFactory.getLogger(JSONSynonymsPreProcessor.class);

    public String transform(String jsonQuestionnaireString) throws IOException {
        // Should throw an exception, yet it may have impacts in Pogues-Back-Office
        if (jsonQuestionnaireString == null) {
            logger.warn("null string given in JSON synonyms pre-processing method.");
            return null;
        }
        return transform(new ByteArrayInputStream(jsonQuestionnaireString.getBytes()));
    }

    public String transform(InputStream jsonQuestionnaireInputStream) throws IOException {
        // Should throw an exception, yet it may have impacts in Pogues-Back-Office
        if (jsonQuestionnaireInputStream == null) {
            logger.warn("null input stream given in JSON synonyms pre-processing method.");
            return null;
        }

        OutputStream outputStream = new ByteArrayOutputStream();

        try (JsonReader jsonReader = Json.createReader(jsonQuestionnaireInputStream);
             JsonWriter jsonWriter = Json.createWriter(outputStream)) {

            JsonObject jsonQuestionnaire = jsonReader.readObject();

            // We will copy the entire input json object, except the "symLinks" attribute in PairwiseLinks components
            JsonObjectBuilder jsonQuestionnaireBuilder = Json.createObjectBuilder();
            editQuestionnaire(jsonQuestionnaire, jsonQuestionnaireBuilder);

            jsonWriter.writeObject(jsonQuestionnaireBuilder.build());
        }

        String result = outputStream.toString();
        outputStream.close();

        return result;
    }

    private static void editQuestionnaire(JsonObject jsonQuestionnaire, JsonObjectBuilder jsonQuestionnaireBuilder) {
        jsonQuestionnaire.forEach((key, jsonValue) -> {
            if (! "CodeLists".equals(key)) {
                jsonQuestionnaireBuilder.add(key, jsonValue);
            } else {
                editCodeLists(jsonQuestionnaireBuilder, (JsonObject) jsonValue);
            }
        });
    }

    private static void editCodeLists(JsonObjectBuilder jsonQuestionnaireBuilder, JsonObject jsonCodeLists) {
        JsonObjectBuilder jsonCodeListsBuilder = Json.createObjectBuilder();
        JsonArray jsonCodeList = jsonCodeLists.getJsonArray("CodeList");
        editCodeListArray(jsonCodeListsBuilder, jsonCodeList);
        jsonQuestionnaireBuilder.add("CodeLists", jsonCodeListsBuilder.build());
    }

    private static void editCodeListArray(JsonObjectBuilder jsonCodeLists, JsonArray jsonCodeListArray) {
        JsonArrayBuilder jsonCodeListArrayBuilder = Json.createArrayBuilder();
        for (JsonValue jsonValue : jsonCodeListArray) {
            JsonObject jsonCodeList = (JsonObject) jsonValue;
            editCodeList(jsonCodeListArrayBuilder, jsonCodeList);
        }
        jsonCodeLists.add("CodeList", jsonCodeListArrayBuilder.build());
    }

    private static void editCodeList(JsonArrayBuilder jsonCodeListArrayBuilder, JsonObject jsonCodeList) {
        JsonObjectBuilder jsonCodeListBuilder = Json.createObjectBuilder();
        jsonCodeList.forEach((key, jsonValue) -> {
            if (! "SuggesterParameters".equals(key)) {
                jsonCodeListBuilder.add(key, jsonValue);
            } else {
                editSuggesterParameters(jsonCodeListBuilder, (JsonObject) jsonValue);
            }
        });
        jsonCodeListArrayBuilder.add(jsonCodeListBuilder.build());
    }

    private static void editSuggesterParameters(JsonObjectBuilder jsonCodeListBuilder, JsonObject jsonSuggesterParameters) {
        JsonObjectBuilder jsonSuggesterParametersBuilder = Json.createObjectBuilder();
        jsonSuggesterParameters.forEach((key, jsonValue) -> {
            if (! "fields".equals(key)) {
                jsonSuggesterParametersBuilder.add(key, jsonValue);
            } else {
                editFieldsArray(jsonSuggesterParametersBuilder, (JsonArray) jsonValue);
            }
        });
        jsonCodeListBuilder.add("SuggesterParameters", jsonSuggesterParametersBuilder.build());
    }

    private static void editFieldsArray(JsonObjectBuilder jsonSuggesterParametersBuilder, JsonArray jsonFieldsArray) {
        JsonArrayBuilder jsonFieldsArrayBuilder = Json.createArrayBuilder();
        for (JsonValue jsonValue : jsonFieldsArray) {
            JsonObject jsonFields = (JsonObject) jsonValue;
            editFields(jsonFieldsArrayBuilder, jsonFields);
        }
        jsonSuggesterParametersBuilder.add("fields", jsonFieldsArrayBuilder.build());
    }

    private static void editFields(JsonArrayBuilder jsonFieldsArrayBuilder, JsonObject jsonFields) {
        JsonObjectBuilder jsonFieldsBuilder = Json.createObjectBuilder();
        jsonFields.forEach((key, jsonValue) -> {
            if (! "synonyms".equals(key)) {
                jsonFieldsBuilder.add(key, jsonValue);
            } else {
                editSynonyms(jsonFieldsBuilder, (JsonObject) jsonValue);
            }
        });
        jsonFieldsArrayBuilder.add(jsonFieldsBuilder.build());
    }

    private static void editSynonyms(JsonObjectBuilder jsonFieldsBuilder, JsonObject jsonSynonyms) {
        JsonArrayBuilder jsonSynonymsArrayBuilder = Json.createArrayBuilder();
        jsonSynonyms.forEach((name, jsonValue) -> {
            JsonObjectBuilder jsonSynonymBuilder = Json.createObjectBuilder();
            jsonSynonymBuilder.add("source", name);
            jsonSynonymBuilder.add("target", jsonValue);
            jsonSynonymsArrayBuilder.add(jsonSynonymBuilder.build());
        });
        jsonFieldsBuilder.add("synonyms", jsonSynonymsArrayBuilder.build());
    }

}
